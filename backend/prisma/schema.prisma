generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String         @id @default(uuid()) @map("_id")
  email          String         @unique
  password       String
  name           String
  role           Role
  licenseNumber  String?
  phone          String?
  profilePicture String?
  bookings       Booking[]      @relation("UserBookings")
  services       Service[]
  reviews        Review[]
  conversations  Conversation[] @relation("UserConversations")
  messages       Message[]      @relation("UserMessages")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Cleaner {
  id             String         @id @default(uuid()) @map("_id")
  email          String         @unique
  password       String
  name           String
  role           Role
  phone          String?
  profilePicture String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  bookings       Booking[]
  conversations  Conversation[] @relation("CleanerConversations")
  messages       Message[]      @relation("CleanerMessages")
}

model Service {
  id           String         @id @default(uuid()) @map("_id")
  name         String
  description  String?
  price        Float
  duration     Int            @default(1)
  userId       String?
  user         User?          @relation(fields: [userId], references: [id])
  bookings     Booking[]
  reviews      Review[]
  image        String?
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Conversation Conversation[]
}

model Booking {
  id            String        @id @default(uuid()) @map("_id")
  userId        String
  user          User          @relation("UserBookings", fields: [userId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  cleanerId     String?
  cleaner       Cleaner?      @relation(fields: [cleanerId], references: [id])
  date          DateTime
  time          String
  location      String
  paymentMethod PaymentMethod
  paymentStatus String?       @default("PENDING")
  status        BookingStatus @default(PENDING)
  notes         String?
  price         Float
  duration      Int
  areas         String[]
  pidx          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reviews       Review[]
}

model Category {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  icon     String
  services Service[]
}

model Review {
  id        String   @id @default(uuid()) @map("_id")
  rating    Int
  comment   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([serviceId])
  @@index([bookingId])
}

model Conversation {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  user      User      @relation("UserConversations", fields: [userId], references: [id])
  cleanerId String?
  cleaner   Cleaner?  @relation("CleanerConversations", fields: [cleanerId], references: [id])
  serviceId String?
  service   Service?  @relation(fields: [serviceId], references: [id])
  isGroup   Boolean   @default(true)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(uuid()) @map("_id")
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  senderType     SenderType
  user           User?        @relation("UserMessages", fields: [senderId], references: [id])
  cleaner        Cleaner?     @relation("CleanerMessages", fields: [senderId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
}

enum Role {
  User
  Admin
  Cleaner
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  KHALTI
}

enum SenderType {
  User
  Cleaner
}
