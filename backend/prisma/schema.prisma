generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  email         String    @unique
  password      String
  name          String
  role          Role
  licenseNumber String?
  phone         String?
  bookings      Booking[]
  services      Service[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Cleaner {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  password  String
  name      String
  role      Role
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  description String?
  price       Float
  duration    Int
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Booking {
  id            String        @id @default(uuid()) @map("_id")
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  date          DateTime
  time          String
  location      String
  paymentMethod PaymentMethod
  status        BookingStatus @default(PENDING)
  notes         String?
  price         Float
  duration      Int
  areas         Json
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  icon     String
  services Service[]
}

model Review {
  id        String   @id @default(uuid()) @map("_id")
  rating    Int
  comment   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([serviceId])
}

enum Role {
  User
  Admin
  Cleaner
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  KHALTI
}
